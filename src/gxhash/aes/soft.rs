use core::mem::transmute;
use core::ptr::copy;

pub use crate::gxhash::common::{Bytes, soft::*};

#[inline(always)]
pub unsafe fn aes_encrypt(data: State, key: State) -> State {
    xor(mix_columns(encrypt(data)), key)
}

#[inline(always)]
pub unsafe fn aes_encrypt_last(data: State, key: State) -> State {
    xor(encrypt(data), key)
}

#[inline]
pub unsafe fn get_partial_safe(data: *const State, len: usize) -> State {
    get_partial_unsafe(data, len)
}

#[inline]
pub unsafe fn get_partial_unsafe(data: *const State, len: usize) -> State {
    let mut buffer = [0u8; 16];
    for i in 0..len {
        buffer[i] = (*data)[i].wrapping_add(len as u8);
    }
    for i in len..16 {
        buffer[i] = len as u8;
    }
    buffer
}

#[inline]
pub unsafe fn compress_8(mut ptr: *const State, end_address: usize, hash_vector: State, len: usize) -> State {

    // Disambiguation vectors
    let mut t1: State = new();
    let mut t2: State = new();

    // Hash is processed in two separate 128-bit parallel lanes
    // This allows the same processing to be applied using 256-bit V-AES instrinsics
    // so that hashes are stable in both cases. 
    let mut lane1 = hash_vector;
    let mut lane2 = hash_vector;

    while (ptr as usize) < end_address {

        crate::gxhash::load_unaligned!(ptr, v0, v1, v2, v3, v4, v5, v6, v7);

        v0 = aes_encrypt(v0, v2);
        v1 = aes_encrypt(v1, v3);

        v0 = aes_encrypt(v0, v4);
        v1 = aes_encrypt(v1, v5);

        v0 = aes_encrypt(v0, v6);
        v1 = aes_encrypt(v1, v7);

        t1 = add_u8(t1, ld(KEYS.as_ptr()));
        t2 = add_u8(t2, ld(KEYS.as_ptr().offset(4)));

        lane1 = aes_encrypt_last(aes_encrypt(v0, t1), lane1);
        lane2 = aes_encrypt_last(aes_encrypt(v1, t2), lane2);
    }
    // For 'Zeroes' test
    let len_vec = load_u32(len as u32);
    lane1 = add_u8(lane1, len_vec);
    lane2 = add_u8(lane2, len_vec);
    // Merge lanes
    aes_encrypt(lane1, lane2)
}

// IMPLEMENTATIONS

const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

#[inline(always)]
pub fn encrypt(state: Bytes) -> Bytes {
    // PERF: combine sub bytes + shift rows
    [
        S_BOX[state[0] as usize], S_BOX[state[1] as usize], S_BOX[state[2] as usize], S_BOX[state[3] as usize],
        S_BOX[state[5] as usize], S_BOX[state[6] as usize], S_BOX[state[7] as usize], S_BOX[state[4] as usize],
        S_BOX[state[10] as usize], S_BOX[state[11] as usize], S_BOX[state[8] as usize], S_BOX[state[9] as usize],
        S_BOX[state[15] as usize], S_BOX[state[12] as usize], S_BOX[state[13] as usize], S_BOX[state[14] as usize],
    ]
}

#[inline(always)]
fn mul2(x: u8) -> u8 {
    (x<<1) ^ (((x>>7) & 1) * 0x1b)
}

#[inline(always)]
pub fn mix_columns(data: Bytes) -> Bytes {
    let mut state = data;
    for i in 0..4 {
        // Calculate indices for 1D array
        let idx0 = i;
        let idx1 = i + 4;
        let idx2 = i + 8;
        let idx3 = i + 12;

        let t = state[idx0];
        let tmp = state[idx0] ^ state[idx1] ^ state[idx2] ^ state[idx3];

        state[idx0] ^= mul2(state[idx0] ^ state[idx1]) ^ tmp;
        state[idx1] ^= mul2(state[idx1] ^ state[idx2]) ^ tmp;
        state[idx2] ^= mul2(state[idx2] ^ state[idx3]) ^ tmp;
        state[idx3] ^= mul2(state[idx3] ^ t) ^ tmp;
    }
    state
}
